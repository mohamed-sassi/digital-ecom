{"version":3,"sources":["webpack:///./node_modules/three/examples/jsm/loaders/MTLLoader.js"],"names":["MTLLoader","manager","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","text","parse","e","console","error","itemError","setMaterialOptions","value","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","wrap","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","getIndex","materialName","getAsArray","index","undefined","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","n","color","fromArray","specular","emissive","transparent","shininess","opacity","invertTrProperty","matParams","items","bumpScale","splice","set","join","mapping","texture","getHandler"],"mappings":"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","file":"js/chunk-2d0bff70.093a9fa1.js","sourcesContent":["import {\n\tColor,\n\tDefaultLoadingManager,\n\tFileLoader,\n\tFrontSide,\n\tLoader,\n\tLoaderUtils,\n\tMeshPhongMaterial,\n\tRepeatWrapping,\n\tTextureLoader,\n\tVector2\n} from \"../../../build/three.module.js\";\n/**\n * Loads a Wavefront .mtl file specifying materials\n */\n\nvar MTLLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n};\n\nMTLLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: MTLLoader,\n\n\t/**\n\t * Loads and parses a MTL asset from a URL.\n\t *\n\t * @param {String} url - URL to the MTL file.\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\n\t * @param {Function} [onProgress] - Callback for download progress.\n\t * @param {Function} [onError] - Callback for download errors.\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to load.\n\t */\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetMaterialOptions: function ( value ) {\n\n\t\tthis.materialOptions = value;\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Parses a MTL file.\n\t *\n\t * @param {String} text - Content of MTL file\n\t * @return {MTLLoader.MaterialCreator}\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to parse.\n\t */\n\tparse: function ( text, path ) {\n\n\t\tvar lines = text.split( '\\n' );\n\t\tvar info = {};\n\t\tvar delimiter_pattern = /\\s+/;\n\t\tvar materialsInfo = {};\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tvar line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar pos = line.indexOf( ' ' );\n\n\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else {\n\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\n\n\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar materialCreator = new MTLLoader.MaterialCreator( this.resourcePath || path, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n} );\n\n/**\n * Create a new MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nMTLLoader.MaterialCreator = function ( baseUrl, options ) {\n\n\tthis.baseUrl = baseUrl || '';\n\tthis.options = options;\n\tthis.materialsInfo = {};\n\tthis.materials = {};\n\tthis.materialsArray = [];\n\tthis.nameLookup = {};\n\n\tthis.side = ( this.options && this.options.side ) ? this.options.side : FrontSide;\n\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : RepeatWrapping;\n\n};\n\nMTLLoader.MaterialCreator.prototype = {\n\n\tconstructor: MTLLoader.MaterialCreator,\n\n\tcrossOrigin: 'anonymous',\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetManager: function ( value ) {\n\n\t\tthis.manager = value;\n\n\t},\n\n\tsetMaterials: function ( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t},\n\n\tconvert: function ( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tvar converted = {};\n\n\t\tfor ( var mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tvar mat = materialsInfo[ mn ];\n\n\t\t\tvar covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\tvar save = true;\n\t\t\t\tvar value = mat[ prop ];\n\t\t\t\tvar lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t},\n\n\tpreload: function () {\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t},\n\n\tgetIndex: function ( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t},\n\n\tgetAsArray: function () {\n\n\t\tvar index = 0;\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t},\n\n\tcreate: function ( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tcreateMaterial_: function ( materialName ) {\n\n\t\t// Create material\n\n\t\tvar scope = this;\n\t\tvar mat = this.materialsInfo[ materialName ];\n\t\tvar params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\treturn '';\n\n\t\t\t// Absolute URL\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\treturn baseUrl + url;\n\n\t\t}\n\n\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\tvar texParams = scope.getTextureParams( value, params );\n\t\t\tvar map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\tmap.wrapS = scope.wrap;\n\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\tparams[ mapType ] = map;\n\n\t\t}\n\n\t\tfor ( var prop in mat ) {\n\n\t\t\tvar value = mat[ prop ];\n\t\t\tvar n;\n\n\t\t\tif ( value === '' ) continue;\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams.color = new Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams.specular = new Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ke':\n\n\t\t\t\t\t// Emissive using RGB values\n\t\t\t\t\tparams.emissive = new Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tsetMapForType( \"map\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t// Specular map\n\n\t\t\t\t\tsetMapForType( \"specularMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ke':\n\n\t\t\t\t\t// Emissive map\n\n\t\t\t\t\tsetMapForType( \"emissiveMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'norm':\n\n\t\t\t\t\tsetMapForType( \"normalMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tsetMapForType( \"bumpMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_d':\n\n\t\t\t\t\t// Alpha map\n\n\t\t\t\t\tsetMapForType( \"alphaMap\", value );\n\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tr':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\n\n\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tgetTextureParams: function ( value, matParams ) {\n\n\t\tvar texParams = {\n\n\t\t\tscale: new Vector2( 1, 1 ),\n\t\t\toffset: new Vector2( 0, 0 )\n\n\t\t };\n\n\t\tvar items = value.split( /\\s+/ );\n\t\tvar pos;\n\n\t\tpos = items.indexOf( '-bm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\titems.splice( pos, 2 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-s' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\tpos = items.indexOf( '-o' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\ttexParams.url = items.join( ' ' ).trim();\n\t\treturn texParams;\n\n\t},\n\n\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tvar texture;\n\t\tvar manager = ( this.manager !== undefined ) ? this.manager : DefaultLoadingManager;\n\t\tvar loader = manager.getHandler( url );\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new TextureLoader( manager );\n\n\t\t}\n\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\t\ttexture = loader.load( url, onLoad, onProgress, onError );\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n};\n\nexport { MTLLoader };\n"],"sourceRoot":""}